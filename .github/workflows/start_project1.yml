name: "Start Terraform Infrastructure"

on:
  repository_dispatch:
    branches: main 
    types: apprecode-project1-build
  workflow_dispatch:
 
jobs:
 terraform_apply:
   name: "tf_apply"
   runs-on: ubuntu-latest
   defaults:
     run:
       shell: bash
       # We keep Terraform files in the terraform directory.
       working-directory: ./project1
 
   steps:
     - name: Checkout the repository to the runner
       uses: actions/checkout@v2
 
     - name: Setup Terraform with specified version on the runner
       uses: hashicorp/setup-terraform@v2
       with:
         terraform_version: 1.2.9
    
     - name: Terraform init
       id: init
       env:
         GH_TOKEN: ${{ secrets.GH_TOKEN }}
         SSH_KEY: ${{ secrets.SSH_KEY }}
       run: |
         export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
         export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
         eval `ssh-agent -s`
         ssh-add - <<< '${{ secrets.SSH_KEY }}'
         terraform init

     - name: Terraform validate
       id: validate
       run: terraform validate
 
     - name: create-json
       id: create-json
       uses: jsdaniell/create-json@v1.2.2
       with:
         name: "tfvars.json"
         json: "${{ toJson(github.event.client_payload.vars) }}"
         # dir: "var/"

     - name: List files in the repository
       run: |
           ls ${{ github.workspace }}
     
     - name: Terraform plan
       id: plan
       run: |
         export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
         export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
         terraform plan -no-color -var-file=../tfvars.json
       continue-on-error: true
#   echo "${{ toJson(github.event.client_payload) }}" > tfvars.json
 
     - name: Terraform Plan Status
       if: steps.plan.outcome == 'failure'
       run: exit 1
 
     - name: Terraform apply
       id: apply
       run: |
         export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
         export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
         terraform apply -auto-approve -var-file=../tfvars.json
